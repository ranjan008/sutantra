{"$message_type":"diagnostic","message":"unresolved import `bytes`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/streaming/real_webrtc.rs","byte_start":871,"byte_end":876,"line_start":18,"line_end":18,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use bytes::Bytes;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a similar path exists","code":null,"level":"help","spans":[{"file_name":"src/streaming/real_webrtc.rs","byte_start":871,"byte_end":876,"line_start":18,"line_end":18,"column_start":5,"column_end":10,"is_primary":true,"text":[{"text":"use bytes::Bytes;","highlight_start":5,"highlight_end":10}],"label":null,"suggested_replacement":"libp2p::bytes","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `bytes`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/streaming/real_webrtc.rs:18:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse bytes::Bytes;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a similar path exists: `libp2p::bytes`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `anyhow::Result`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/blockchain/mod.rs","byte_start":4,"byte_end":18,"line_start":1,"line_end":1,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"use anyhow::Result;","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/blockchain/mod.rs","byte_start":0,"byte_end":20,"line_start":1,"line_end":2,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use anyhow::Result;","highlight_start":1,"highlight_end":20},{"text":"use tokio::sync::mpsc;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `anyhow::Result`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/blockchain/mod.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse anyhow::Result;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `tokio::sync::mpsc`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/blockchain/mod.rs","byte_start":24,"byte_end":41,"line_start":2,"line_end":2,"column_start":5,"column_end":22,"is_primary":true,"text":[{"text":"use tokio::sync::mpsc;","highlight_start":5,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/blockchain/mod.rs","byte_start":20,"byte_end":43,"line_start":2,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use tokio::sync::mpsc;","highlight_start":1,"highlight_end":23},{"text":"use tracing::{info, warn};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `tokio::sync::mpsc`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/blockchain/mod.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse tokio::sync::mpsc;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `info` and `warn`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/blockchain/mod.rs","byte_start":57,"byte_end":61,"line_start":3,"line_end":3,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"use tracing::{info, warn};","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/blockchain/mod.rs","byte_start":63,"byte_end":67,"line_start":3,"line_end":3,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"use tracing::{info, warn};","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/blockchain/mod.rs","byte_start":43,"byte_end":70,"line_start":3,"line_end":4,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use tracing::{info, warn};","highlight_start":1,"highlight_end":27},{"text":"use serde::{Serialize, Deserialize};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `info` and `warn`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/blockchain/mod.rs:3:15\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse tracing::{info, warn};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `Block`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/blockchain/engine.rs","byte_start":227,"byte_end":232,"line_start":8,"line_end":8,"column_start":67,"column_end":72,"is_primary":true,"text":[{"text":"use super::{BlockchainConfig, BlockchainEvent, BlockchainCommand, Block, Transaction, Account, StreamRegistration};","highlight_start":67,"highlight_end":72}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/blockchain/engine.rs","byte_start":225,"byte_end":232,"line_start":8,"line_end":8,"column_start":65,"column_end":72,"is_primary":true,"text":[{"text":"use super::{BlockchainConfig, BlockchainEvent, BlockchainCommand, Block, Transaction, Account, StreamRegistration};","highlight_start":65,"highlight_end":72}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `Block`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/blockchain/engine.rs:8:67\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m8\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse super::{BlockchainConfig, BlockchainEvent, BlockchainCommand, Block, Transaction, Account, StreamRegistration};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `anyhow::Result`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/streaming/mod.rs","byte_start":4,"byte_end":18,"line_start":1,"line_end":1,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"use anyhow::Result;","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/streaming/mod.rs","byte_start":0,"byte_end":20,"line_start":1,"line_end":2,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use anyhow::Result;","highlight_start":1,"highlight_end":20},{"text":"use tokio::sync::mpsc;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `anyhow::Result`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/streaming/mod.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse anyhow::Result;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `tokio::sync::mpsc`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/streaming/mod.rs","byte_start":24,"byte_end":41,"line_start":2,"line_end":2,"column_start":5,"column_end":22,"is_primary":true,"text":[{"text":"use tokio::sync::mpsc;","highlight_start":5,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/streaming/mod.rs","byte_start":20,"byte_end":43,"line_start":2,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use tokio::sync::mpsc;","highlight_start":1,"highlight_end":23},{"text":"use tracing::{info, warn};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `tokio::sync::mpsc`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/streaming/mod.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse tokio::sync::mpsc;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `info` and `warn`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/streaming/mod.rs","byte_start":57,"byte_end":61,"line_start":3,"line_end":3,"column_start":15,"column_end":19,"is_primary":true,"text":[{"text":"use tracing::{info, warn};","highlight_start":15,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/streaming/mod.rs","byte_start":63,"byte_end":67,"line_start":3,"line_end":3,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"use tracing::{info, warn};","highlight_start":21,"highlight_end":25}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/streaming/mod.rs","byte_start":43,"byte_end":70,"line_start":3,"line_end":4,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use tracing::{info, warn};","highlight_start":1,"highlight_end":27},{"text":"use serde::{Serialize, Deserialize};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `info` and `warn`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/streaming/mod.rs:3:15\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m3\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse tracing::{info, warn};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m               \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `StreamData`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/streaming/engine.rs","byte_start":241,"byte_end":251,"line_start":7,"line_end":7,"column_start":39,"column_end":49,"is_primary":true,"text":[{"text":"use super::webrtc::{MockWebRTCEngine, StreamData};","highlight_start":39,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/streaming/engine.rs","byte_start":239,"byte_end":251,"line_start":7,"line_end":7,"column_start":37,"column_end":49,"is_primary":true,"text":[{"text":"use super::webrtc::{MockWebRTCEngine, StreamData};","highlight_start":37,"highlight_end":49}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/streaming/engine.rs","byte_start":222,"byte_end":223,"line_start":7,"line_end":7,"column_start":20,"column_end":21,"is_primary":true,"text":[{"text":"use super::webrtc::{MockWebRTCEngine, StreamData};","highlight_start":20,"highlight_end":21}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/streaming/engine.rs","byte_start":251,"byte_end":252,"line_start":7,"line_end":7,"column_start":49,"column_end":50,"is_primary":true,"text":[{"text":"use super::webrtc::{MockWebRTCEngine, StreamData};","highlight_start":49,"highlight_end":50}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `StreamData`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/streaming/engine.rs:7:39\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse super::webrtc::{MockWebRTCEngine, StreamData};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `warn`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/streaming/webrtc.rs","byte_start":135,"byte_end":139,"line_start":4,"line_end":4,"column_start":28,"column_end":32,"is_primary":true,"text":[{"text":"use tracing::{info, debug, warn, error};","highlight_start":28,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/streaming/webrtc.rs","byte_start":133,"byte_end":139,"line_start":4,"line_end":4,"column_start":26,"column_end":32,"is_primary":true,"text":[{"text":"use tracing::{info, debug, warn, error};","highlight_start":26,"highlight_end":32}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `warn`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/streaming/webrtc.rs:4:28\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse tracing::{info, debug, warn, error};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `Mutex` and `mpsc`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/streaming/real_webrtc.rs","byte_start":89,"byte_end":93,"line_start":4,"line_end":4,"column_start":19,"column_end":23,"is_primary":true,"text":[{"text":"use tokio::sync::{mpsc, Mutex, RwLock};","highlight_start":19,"highlight_end":23}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/streaming/real_webrtc.rs","byte_start":95,"byte_end":100,"line_start":4,"line_end":4,"column_start":25,"column_end":30,"is_primary":true,"text":[{"text":"use tokio::sync::{mpsc, Mutex, RwLock};","highlight_start":25,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/streaming/real_webrtc.rs","byte_start":89,"byte_end":102,"line_start":4,"line_end":4,"column_start":19,"column_end":32,"is_primary":true,"text":[{"text":"use tokio::sync::{mpsc, Mutex, RwLock};","highlight_start":19,"highlight_end":32}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/streaming/real_webrtc.rs","byte_start":88,"byte_end":89,"line_start":4,"line_end":4,"column_start":18,"column_end":19,"is_primary":true,"text":[{"text":"use tokio::sync::{mpsc, Mutex, RwLock};","highlight_start":18,"highlight_end":19}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/streaming/real_webrtc.rs","byte_start":108,"byte_end":109,"line_start":4,"line_end":4,"column_start":38,"column_end":39,"is_primary":true,"text":[{"text":"use tokio::sync::{mpsc, Mutex, RwLock};","highlight_start":38,"highlight_end":39}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `Mutex` and `mpsc`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/streaming/real_webrtc.rs:4:19\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse tokio::sync::{mpsc, Mutex, RwLock};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                   \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `RTCRtpCodecParameters` and `RTPCodecType`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/streaming/real_webrtc.rs","byte_start":688,"byte_end":709,"line_start":15,"line_end":15,"column_start":65,"column_end":86,"is_primary":true,"text":[{"text":"use webrtc::rtp_transceiver::rtp_codec::{RTCRtpCodecCapability, RTCRtpCodecParameters, RTPCodecType};","highlight_start":65,"highlight_end":86}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/streaming/real_webrtc.rs","byte_start":711,"byte_end":723,"line_start":15,"line_end":15,"column_start":88,"column_end":100,"is_primary":true,"text":[{"text":"use webrtc::rtp_transceiver::rtp_codec::{RTCRtpCodecCapability, RTCRtpCodecParameters, RTPCodecType};","highlight_start":88,"highlight_end":100}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/streaming/real_webrtc.rs","byte_start":686,"byte_end":723,"line_start":15,"line_end":15,"column_start":63,"column_end":100,"is_primary":true,"text":[{"text":"use webrtc::rtp_transceiver::rtp_codec::{RTCRtpCodecCapability, RTCRtpCodecParameters, RTPCodecType};","highlight_start":63,"highlight_end":100}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/streaming/real_webrtc.rs","byte_start":664,"byte_end":665,"line_start":15,"line_end":15,"column_start":41,"column_end":42,"is_primary":true,"text":[{"text":"use webrtc::rtp_transceiver::rtp_codec::{RTCRtpCodecCapability, RTCRtpCodecParameters, RTPCodecType};","highlight_start":41,"highlight_end":42}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/streaming/real_webrtc.rs","byte_start":723,"byte_end":724,"line_start":15,"line_end":15,"column_start":100,"column_end":101,"is_primary":true,"text":[{"text":"use webrtc::rtp_transceiver::rtp_codec::{RTCRtpCodecCapability, RTCRtpCodecParameters, RTPCodecType};","highlight_start":100,"highlight_end":101}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `RTCRtpCodecParameters` and `RTPCodecType`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/streaming/real_webrtc.rs:15:65\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse webrtc::rtp_transceiver::rtp_codec::{RTCRtpCodecCapability, RTCRtpCodecParameters, RTPCodecType};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `BlockchainEngine`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/integration/mod.rs","byte_start":126,"byte_end":142,"line_start":6,"line_end":6,"column_start":25,"column_end":41,"is_primary":true,"text":[{"text":"use crate::blockchain::{BlockchainEngine, BlockchainEvent, BlockchainCommand};","highlight_start":25,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/integration/mod.rs","byte_start":126,"byte_end":144,"line_start":6,"line_end":6,"column_start":25,"column_end":43,"is_primary":true,"text":[{"text":"use crate::blockchain::{BlockchainEngine, BlockchainEvent, BlockchainCommand};","highlight_start":25,"highlight_end":43}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `BlockchainEngine`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/integration/mod.rs:6:25\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::blockchain::{BlockchainEngine, BlockchainEvent, BlockchainCommand};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `StreamingEngine`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/integration/mod.rs","byte_start":204,"byte_end":219,"line_start":7,"line_end":7,"column_start":24,"column_end":39,"is_primary":true,"text":[{"text":"use crate::streaming::{StreamingEngine, StreamingEvent, StreamingCommand};","highlight_start":24,"highlight_end":39}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/integration/mod.rs","byte_start":204,"byte_end":221,"line_start":7,"line_end":7,"column_start":24,"column_end":41,"is_primary":true,"text":[{"text":"use crate::streaming::{StreamingEngine, StreamingEvent, StreamingCommand};","highlight_start":24,"highlight_end":41}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `StreamingEngine`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/integration/mod.rs:7:24\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::streaming::{StreamingEngine, StreamingEvent, StreamingCommand};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `std::sync::Arc`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/integration/node.rs","byte_start":24,"byte_end":38,"line_start":2,"line_end":2,"column_start":5,"column_end":19,"is_primary":true,"text":[{"text":"use std::sync::Arc;","highlight_start":5,"highlight_end":19}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src/integration/node.rs","byte_start":20,"byte_end":40,"line_start":2,"line_end":3,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use std::sync::Arc;","highlight_start":1,"highlight_end":20},{"text":"use tokio::sync::mpsc;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `std::sync::Arc`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/integration/node.rs:2:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::sync::Arc;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `BlockchainCommand` and `BlockchainEvent`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/integration/node.rs","byte_start":134,"byte_end":149,"line_start":6,"line_end":6,"column_start":43,"column_end":58,"is_primary":true,"text":[{"text":"use crate::blockchain::{BlockchainEngine, BlockchainEvent, BlockchainCommand, BlockchainConfig};","highlight_start":43,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/integration/node.rs","byte_start":151,"byte_end":168,"line_start":6,"line_end":6,"column_start":60,"column_end":77,"is_primary":true,"text":[{"text":"use crate::blockchain::{BlockchainEngine, BlockchainEvent, BlockchainCommand, BlockchainConfig};","highlight_start":60,"highlight_end":77}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/integration/node.rs","byte_start":132,"byte_end":168,"line_start":6,"line_end":6,"column_start":41,"column_end":77,"is_primary":true,"text":[{"text":"use crate::blockchain::{BlockchainEngine, BlockchainEvent, BlockchainCommand, BlockchainConfig};","highlight_start":41,"highlight_end":77}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `BlockchainCommand` and `BlockchainEvent`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/integration/node.rs:6:43\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m6\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::blockchain::{BlockchainEngine, BlockchainEvent, BlockchainCommand, BlockchainConfig};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused imports: `StreamingCommand` and `StreamingEvent`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/integration/node.rs","byte_start":229,"byte_end":243,"line_start":7,"line_end":7,"column_start":41,"column_end":55,"is_primary":true,"text":[{"text":"use crate::streaming::{StreamingEngine, StreamingEvent, StreamingCommand, StreamingConfig};","highlight_start":41,"highlight_end":55}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/integration/node.rs","byte_start":245,"byte_end":261,"line_start":7,"line_end":7,"column_start":57,"column_end":73,"is_primary":true,"text":[{"text":"use crate::streaming::{StreamingEngine, StreamingEvent, StreamingCommand, StreamingConfig};","highlight_start":57,"highlight_end":73}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src/integration/node.rs","byte_start":227,"byte_end":261,"line_start":7,"line_end":7,"column_start":39,"column_end":73,"is_primary":true,"text":[{"text":"use crate::streaming::{StreamingEngine, StreamingEvent, StreamingCommand, StreamingConfig};","highlight_start":39,"highlight_end":73}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused imports: `StreamingCommand` and `StreamingEvent`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/integration/node.rs:7:41\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::streaming::{StreamingEngine, StreamingEvent, StreamingCommand, StreamingConfig};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `peer_connection_clone`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/streaming/real_webrtc.rs","byte_start":6348,"byte_end":6369,"line_start":172,"line_end":172,"column_start":21,"column_end":42,"is_primary":true,"text":[{"text":"                let peer_connection_clone = Arc::clone(&peer_connection);","highlight_start":21,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_variables)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/streaming/real_webrtc.rs","byte_start":6348,"byte_end":6369,"line_start":172,"line_end":172,"column_start":21,"column_end":42,"is_primary":true,"text":[{"text":"                let peer_connection_clone = Arc::clone(&peer_connection);","highlight_start":21,"highlight_end":42}],"label":null,"suggested_replacement":"_peer_connection_clone","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `peer_connection_clone`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/streaming/real_webrtc.rs:172:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m172\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let peer_connection_clone = Arc::clone(&peer_connection);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_peer_connection_clone`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_variables)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused variable: `peer_connection`","code":{"code":"unused_variables","explanation":null},"level":"warning","spans":[{"file_name":"src/streaming/real_webrtc.rs","byte_start":12810,"byte_end":12825,"line_start":328,"line_end":328,"column_start":21,"column_end":36,"is_primary":true,"text":[{"text":"        if let Some(peer_connection) = self.peer_connections.read().await.get(&peer_key) {","highlight_start":21,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"if this is intentional, prefix it with an underscore","code":null,"level":"help","spans":[{"file_name":"src/streaming/real_webrtc.rs","byte_start":12810,"byte_end":12825,"line_start":328,"line_end":328,"column_start":21,"column_end":36,"is_primary":true,"text":[{"text":"        if let Some(peer_connection) = self.peer_connections.read().await.get(&peer_key) {","highlight_start":21,"highlight_end":36}],"label":null,"suggested_replacement":"_peer_connection","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused variable: `peer_connection`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/streaming/real_webrtc.rs:328:21\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m328\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if let Some(peer_connection) = self.peer_connections.read().await.get(&peer_key) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: if this is intentional, prefix it with an underscore: `_peer_connection`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`std::sync::MutexGuard<'_, Arc<RTCRtpSender>>` cannot be sent between threads safely","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/integration/node.rs","byte_start":3836,"byte_end":4008,"line_start":117,"line_end":121,"column_start":18,"column_end":15,"is_primary":true,"text":[{"text":"            Some(tokio::spawn(async move {","highlight_start":18,"highlight_end":43},{"text":"                if let Err(e) = engine.run().await {","highlight_start":1,"highlight_end":53},{"text":"                    error!(\"Streaming engine error: {}\", e);","highlight_start":1,"highlight_end":61},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }))","highlight_start":1,"highlight_end":15}],"label":"`std::sync::MutexGuard<'_, Arc<RTCRtpSender>>` cannot be sent between threads safely","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/integration/node.rs","byte_start":3849,"byte_end":3859,"line_start":117,"line_end":117,"column_start":31,"column_end":41,"is_primary":false,"text":[{"text":"            Some(tokio::spawn(async move {","highlight_start":31,"highlight_end":41}],"label":"within this `{async block@src/integration/node.rs:117:31: 117:41}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"within `{async block@src/integration/node.rs:117:31: 117:41}`, the trait `Send` is not implemented for `std::sync::MutexGuard<'_, Arc<RTCRtpSender>>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because it appears within the type `webrtc::webrtc_util::sync::MutexGuard<'_, Arc<RTCRtpSender>>`","code":null,"level":"note","spans":[{"file_name":"/home/abhi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webrtc-util-0.7.0/src/sync/mod.rs","byte_start":829,"byte_end":839,"line_start":28,"line_end":28,"column_start":12,"column_end":22,"is_primary":true,"text":[{"text":"pub struct MutexGuard<'a, T>(sync::MutexGuard<'a, T>);","highlight_start":12,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it's used within this `async` fn body","code":null,"level":"note","spans":[{"file_name":"/home/abhi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webrtc-0.7.3/src/rtp_transceiver/mod.rs","byte_start":14133,"byte_end":14562,"line_start":419,"line_end":438,"column_start":44,"column_end":6,"is_primary":true,"text":[{"text":"    pub async fn stop(&self) -> Result<()> {","highlight_start":44,"highlight_end":1},{"text":"        if self.stopped.load(Ordering::SeqCst) {","highlight_start":1,"highlight_end":1},{"text":"            return Ok(());","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        self.stopped.store(true, Ordering::SeqCst);","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        {","highlight_start":1,"highlight_end":1},{"text":"            let sender = self.sender.lock();","highlight_start":1,"highlight_end":1},{"text":"            sender.stop().await?;","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"        {","highlight_start":1,"highlight_end":1},{"text":"            let r = self.receiver.lock();","highlight_start":1,"highlight_end":1},{"text":"            r.stop().await?;","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        self.set_direction_internal(RTCRtpTransceiverDirection::Inactive);","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Ok(())","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it's used within this `async` fn body","code":null,"level":"note","spans":[{"file_name":"/home/abhi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webrtc-0.7.3/src/peer_connection/mod.rs","byte_start":79769,"byte_end":82969,"line_start":1881,"line_end":1959,"column_start":45,"column_end":6,"is_primary":true,"text":[{"text":"    pub async fn close(&self) -> Result<()> {","highlight_start":45,"highlight_end":1},{"text":"        // https://www.w3.org/TR/webrtc/#dom-rtcpeerconnection-close (step #1)","highlight_start":1,"highlight_end":1},{"text":"        if self.internal.is_closed.load(Ordering::SeqCst) {","highlight_start":1,"highlight_end":1},{"text":"            return Ok(());","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // https://www.w3.org/TR/webrtc/#dom-rtcpeerconnection-close (step #2)","highlight_start":1,"highlight_end":1},{"text":"        self.internal.is_closed.store(true, Ordering::SeqCst);","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // https://www.w3.org/TR/webrtc/#dom-rtcpeerconnection-close (step #3)","highlight_start":1,"highlight_end":1},{"text":"        self.internal","highlight_start":1,"highlight_end":1},{"text":"            .signaling_state","highlight_start":1,"highlight_end":1},{"text":"            .store(RTCSignalingState::Closed as u8, Ordering::SeqCst);","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Try closing everything and collect the errors","highlight_start":1,"highlight_end":1},{"text":"        // Shutdown strategy:","highlight_start":1,"highlight_end":1},{"text":"        // 1. All Conn close by closing their underlying Conn.","highlight_start":1,"highlight_end":1},{"text":"        // 2. A Mux stops this chain. It won't close the underlying","highlight_start":1,"highlight_end":1},{"text":"        //    Conn if one of the endpoints is closed down. To","highlight_start":1,"highlight_end":1},{"text":"        //    continue the chain the Mux has to be closed.","highlight_start":1,"highlight_end":1},{"text":"        let mut close_errs = vec![];","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if let Err(err) = self.interceptor.close().await {","highlight_start":1,"highlight_end":1},{"text":"            close_errs.push(Error::new(format!(\"interceptor: {err}\")));","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // https://www.w3.org/TR/webrtc/#dom-rtcpeerconnection-close (step #4)","highlight_start":1,"highlight_end":1},{"text":"        {","highlight_start":1,"highlight_end":1},{"text":"            let mut rtp_transceivers = self.internal.rtp_transceivers.lock().await;","highlight_start":1,"highlight_end":1},{"text":"            for t in &*rtp_transceivers {","highlight_start":1,"highlight_end":1},{"text":"                if let Err(err) = t.stop().await {","highlight_start":1,"highlight_end":1},{"text":"                    close_errs.push(Error::new(format!(\"rtp_transceivers: {err}\")));","highlight_start":1,"highlight_end":1},{"text":"                }","highlight_start":1,"highlight_end":1},{"text":"            }","highlight_start":1,"highlight_end":1},{"text":"            rtp_transceivers.clear();","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // https://www.w3.org/TR/webrtc/#dom-rtcpeerconnection-close (step #5)","highlight_start":1,"highlight_end":1},{"text":"        {","highlight_start":1,"highlight_end":1},{"text":"            let mut data_channels = self.internal.sctp_transport.data_channels.lock().await;","highlight_start":1,"highlight_end":1},{"text":"            for d in &*data_channels {","highlight_start":1,"highlight_end":1},{"text":"                if let Err(err) = d.close().await {","highlight_start":1,"highlight_end":1},{"text":"                    close_errs.push(Error::new(format!(\"data_channels: {err}\")));","highlight_start":1,"highlight_end":1},{"text":"                }","highlight_start":1,"highlight_end":1},{"text":"            }","highlight_start":1,"highlight_end":1},{"text":"            data_channels.clear();","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // https://www.w3.org/TR/webrtc/#dom-rtcpeerconnection-close (step #6)","highlight_start":1,"highlight_end":1},{"text":"        if let Err(err) = self.internal.sctp_transport.stop().await {","highlight_start":1,"highlight_end":1},{"text":"            close_errs.push(Error::new(format!(\"sctp_transport: {err}\")));","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // https://www.w3.org/TR/webrtc/#dom-rtcpeerconnection-close (step #7)","highlight_start":1,"highlight_end":1},{"text":"        if let Err(err) = self.internal.dtls_transport.stop().await {","highlight_start":1,"highlight_end":1},{"text":"            close_errs.push(Error::new(format!(\"dtls_transport: {err}\")));","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // https://www.w3.org/TR/webrtc/#dom-rtcpeerconnection-close (step #8, #9, #10)","highlight_start":1,"highlight_end":1},{"text":"        if let Err(err) = self.internal.ice_transport.stop().await {","highlight_start":1,"highlight_end":1},{"text":"            close_errs.push(Error::new(format!(\"dtls_transport: {err}\")));","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // https://www.w3.org/TR/webrtc/#dom-rtcpeerconnection-close (step #11)","highlight_start":1,"highlight_end":1},{"text":"        RTCPeerConnection::update_connection_state(","highlight_start":1,"highlight_end":1},{"text":"            &self.internal.on_peer_connection_state_change_handler,","highlight_start":1,"highlight_end":1},{"text":"            &self.internal.is_closed,","highlight_start":1,"highlight_end":1},{"text":"            &self.internal.peer_connection_state,","highlight_start":1,"highlight_end":1},{"text":"            self.ice_connection_state(),","highlight_start":1,"highlight_end":1},{"text":"            self.internal.dtls_transport.state(),","highlight_start":1,"highlight_end":1},{"text":"        )","highlight_start":1,"highlight_end":1},{"text":"        .await;","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if let Err(err) = self.internal.ops.close().await {","highlight_start":1,"highlight_end":1},{"text":"            close_errs.push(Error::new(format!(\"ops: {err}\")));","highlight_start":1,"highlight_end":1},{"text":"        }","highlight_start":1,"highlight_end":1},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        flatten_errs(close_errs)","highlight_start":1,"highlight_end":1},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it's used within this `async` fn body","code":null,"level":"note","spans":[{"file_name":"src/streaming/real_webrtc.rs","byte_start":9254,"byte_end":9956,"line_start":235,"line_end":254,"column_start":99,"column_end":6,"is_primary":true,"text":[{"text":"    pub async fn disconnect_viewer(&mut self, stream_id: String, viewer_id: String) -> Result<()> {","highlight_start":99,"highlight_end":100},{"text":"        info!(\"❌ Disconnecting viewer {} from stream {}\", viewer_id, stream_id);","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let peer_key = format!(\"{}:{}\", stream_id, viewer_id);","highlight_start":1,"highlight_end":63},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        // Close the peer connection","highlight_start":1,"highlight_end":37},{"text":"        if let Some(peer_connection) = self.peer_connections.write().await.remove(&peer_key) {","highlight_start":1,"highlight_end":95},{"text":"            if let Err(e) = peer_connection.close().await {","highlight_start":1,"highlight_end":60},{"text":"                warn!(\"Error closing peer connection: {}\", e);","highlight_start":1,"highlight_end":63},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Remove viewer from stream","highlight_start":1,"highlight_end":37},{"text":"        if let Some(stream) = self.active_streams.write().await.get_mut(&stream_id) {","highlight_start":1,"highlight_end":86},{"text":"            stream.viewers.remove(&viewer_id);","highlight_start":1,"highlight_end":47},{"text":"            stream.viewer_count = stream.viewers.len() as u32;","highlight_start":1,"highlight_end":63},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Ok(())","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it's used within this `async` fn body","code":null,"level":"note","spans":[{"file_name":"src/streaming/engine.rs","byte_start":1537,"byte_end":1761,"line_start":40,"line_end":45,"column_start":96,"column_end":6,"is_primary":true,"text":[{"text":"    pub async fn disconnect_viewer(&mut self, stream_id: String, viewer: String) -> Result<()> {","highlight_start":96,"highlight_end":97},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            WebRTCEngine::Mock(engine) => engine.disconnect_viewer(stream_id, viewer).await,","highlight_start":1,"highlight_end":93},{"text":"            WebRTCEngine::Real(engine) => engine.disconnect_viewer(stream_id, viewer).await,","highlight_start":1,"highlight_end":93},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it's used within this `async` fn body","code":null,"level":"note","spans":[{"file_name":"src/streaming/engine.rs","byte_start":4566,"byte_end":8242,"line_start":125,"line_end":208,"column_start":81,"column_end":6,"is_primary":true,"text":[{"text":"    async fn handle_command(&mut self, command: StreamingCommand) -> Result<()> {","highlight_start":81,"highlight_end":82},{"text":"        match command {","highlight_start":1,"highlight_end":24},{"text":"            StreamingCommand::PrepareStream { stream_id, creator } => {","highlight_start":1,"highlight_end":72},{"text":"                info!(\"🎬 Preparing stream: {} by {}\", stream_id, creator);","highlight_start":1,"highlight_end":75},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let quality = StreamQualitySettings::default();","highlight_start":1,"highlight_end":64},{"text":"                self.webrtc_engine.create_stream(stream_id.clone(), creator.clone(), quality).await?;","highlight_start":1,"highlight_end":102},{"text":"                self.active_streams.insert(stream_id, creator);","highlight_start":1,"highlight_end":64},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            StreamingCommand::StartStream { stream_id, creator, quality_settings } => {","highlight_start":1,"highlight_end":88},{"text":"                info!(\"▶️ Starting stream: {} by {}\", stream_id, creator);","highlight_start":1,"highlight_end":75},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                // Create the stream with specified quality","highlight_start":1,"highlight_end":60},{"text":"                self.webrtc_engine.create_stream(stream_id.clone(), creator.clone(), quality_settings).await?;","highlight_start":1,"highlight_end":111},{"text":"                self.active_streams.insert(stream_id.clone(), creator.clone());","highlight_start":1,"highlight_end":80},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                // Start generating some demo stream data","highlight_start":1,"highlight_end":58},{"text":"                let stream_id_clone = stream_id.clone();","highlight_start":1,"highlight_end":57},{"text":"                let event_tx = self.event_tx.clone();","highlight_start":1,"highlight_end":54},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                tokio::spawn(async move {","highlight_start":1,"highlight_end":42},{"text":"                    // Simulate stream data generation","highlight_start":1,"highlight_end":55},{"text":"                    for frame in 0..30 { // 30 frames for demo","highlight_start":1,"highlight_end":63},{"text":"                        // In the demo, we just simulate successful data transmission","highlight_start":1,"highlight_end":86},{"text":"                        debug!(\"📡 Simulated stream data frame {}\", frame);","highlight_start":1,"highlight_end":75},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                        tokio::time::sleep(tokio::time::Duration::from_millis(33)).await; // ~30 FPS","highlight_start":1,"highlight_end":101},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                    // Emit stream ended event","highlight_start":1,"highlight_end":47},{"text":"                    let _ = event_tx.send(StreamingEvent::StreamEnded { ","highlight_start":1,"highlight_end":73},{"text":"                        stream_id: stream_id_clone, ","highlight_start":1,"highlight_end":53},{"text":"                        duration_seconds: 1 ","highlight_start":1,"highlight_end":45},{"text":"                    }).await;","highlight_start":1,"highlight_end":30},{"text":"                });","highlight_start":1,"highlight_end":20},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                self.event_tx.send(StreamingEvent::StreamStarted { ","highlight_start":1,"highlight_end":68},{"text":"                    stream_id, ","highlight_start":1,"highlight_end":32},{"text":"                    creator ","highlight_start":1,"highlight_end":29},{"text":"                }).await?;","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            StreamingCommand::GrantAccess { stream_id, viewer } => {","highlight_start":1,"highlight_end":69},{"text":"                info!(\"✅ Granting access: {} to stream {}\", viewer, stream_id);","highlight_start":1,"highlight_end":80},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                self.webrtc_engine.connect_viewer(stream_id.clone(), viewer.clone()).await?;","highlight_start":1,"highlight_end":93},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                self.event_tx.send(StreamingEvent::ViewerConnected { ","highlight_start":1,"highlight_end":70},{"text":"                    stream_id, ","highlight_start":1,"highlight_end":32},{"text":"                    viewer_id: viewer ","highlight_start":1,"highlight_end":39},{"text":"                }).await?;","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            StreamingCommand::RevokeAccess { stream_id, viewer } => {","highlight_start":1,"highlight_end":70},{"text":"                info!(\"❌ Revoking access: {} from stream {}\", viewer, stream_id);","highlight_start":1,"highlight_end":82},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                self.webrtc_engine.disconnect_viewer(stream_id.clone(), viewer.clone()).await?;","highlight_start":1,"highlight_end":96},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                self.event_tx.send(StreamingEvent::ViewerDisconnected { ","highlight_start":1,"highlight_end":73},{"text":"                    stream_id, ","highlight_start":1,"highlight_end":32},{"text":"                    viewer_id: viewer,","highlight_start":1,"highlight_end":39},{"text":"                    reason: \"Access revoked\".to_string(),","highlight_start":1,"highlight_end":58},{"text":"                }).await?;","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            StreamingCommand::ConnectToStream { stream_id, viewer } => {","highlight_start":1,"highlight_end":73},{"text":"                info!(\"🔗 Connecting {} to stream {}\", viewer, stream_id);","highlight_start":1,"highlight_end":74},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                self.webrtc_engine.connect_viewer(stream_id.clone(), viewer.clone()).await?;","highlight_start":1,"highlight_end":93},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                self.event_tx.send(StreamingEvent::ViewerConnected { ","highlight_start":1,"highlight_end":70},{"text":"                    stream_id, ","highlight_start":1,"highlight_end":32},{"text":"                    viewer_id: viewer ","highlight_start":1,"highlight_end":39},{"text":"                }).await?;","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            _ => {","highlight_start":1,"highlight_end":19},{"text":"                debug!(\"Unhandled streaming command: {:?}\", command);","highlight_start":1,"highlight_end":70},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        Ok(())","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it's used within this `async` fn body","code":null,"level":"note","spans":[{"file_name":"src/streaming/engine.rs","byte_start":3434,"byte_end":4480,"line_start":93,"line_end":123,"column_start":47,"column_end":6,"is_primary":true,"text":[{"text":"    pub async fn run(&mut self) -> Result<()> {","highlight_start":47,"highlight_end":48},{"text":"        info!(\"🚀 Starting Streaming Engine\");","highlight_start":1,"highlight_end":46},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        // Start accepting WebRTC connections in background","highlight_start":1,"highlight_end":60},{"text":"        let _webrtc_engine = &self.webrtc_engine;","highlight_start":1,"highlight_end":50},{"text":"        tokio::spawn(async move {","highlight_start":1,"highlight_end":34},{"text":"            // Note: In the actual implementation, we'd clone webrtc_engine here","highlight_start":1,"highlight_end":81},{"text":"            // For now, we'll just simulate connection acceptance","highlight_start":1,"highlight_end":66},{"text":"            loop {","highlight_start":1,"highlight_end":19},{"text":"                tokio::time::sleep(tokio::time::Duration::from_secs(1)).await;","highlight_start":1,"highlight_end":79},{"text":"                debug!(\"🔄 WebRTC connection handler running\");","highlight_start":1,"highlight_end":63},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        loop {","highlight_start":1,"highlight_end":15},{"text":"            tokio::select! {","highlight_start":1,"highlight_end":29},{"text":"                Some(command) = self.command_rx.recv() => {","highlight_start":1,"highlight_end":60},{"text":"                    if let Err(e) = self.handle_command(command).await {","highlight_start":1,"highlight_end":73},{"text":"                        error!(\"Error handling streaming command: {}\", e);","highlight_start":1,"highlight_end":75},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                else => {","highlight_start":1,"highlight_end":26},{"text":"                    warn!(\"Streaming command channel closed\");","highlight_start":1,"highlight_end":63},{"text":"                    break;","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        Ok(())","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it's used within this `async` block","code":null,"level":"note","spans":[{"file_name":"src/integration/node.rs","byte_start":3849,"byte_end":3859,"line_start":117,"line_end":117,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"            Some(tokio::spawn(async move {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `tokio::spawn`","code":null,"level":"note","spans":[{"file_name":"/home/abhi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.47.1/src/task/spawn.rs","byte_start":5224,"byte_end":5229,"line_start":166,"line_end":166,"column_start":12,"column_end":17,"is_primary":false,"text":[{"text":"    pub fn spawn<F>(future: F) -> JoinHandle<F::Output>","highlight_start":12,"highlight_end":17}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/abhi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.47.1/src/task/spawn.rs","byte_start":5299,"byte_end":5303,"line_start":168,"line_end":168,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"        F: Future + Send + 'static,","highlight_start":21,"highlight_end":25}],"label":"required by this bound in `spawn`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `std::sync::MutexGuard<'_, Arc<RTCRtpSender>>` cannot be sent between threads safely\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/integration/node.rs:117:18\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            Some(tokio::spawn(async move {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mwithin this `{async block@src/integration/node.rs:117:31: 117:41}`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m __________________|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                if let Err(e) = engine.run().await {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m119\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    error!(\"Streaming engine error: {}\", e);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }))\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`std::sync::MutexGuard<'_, Arc<RTCRtpSender>>` cannot be sent between threads safely\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: within `{async block@src/integration/node.rs:117:31: 117:41}`, the trait `Send` is not implemented for `std::sync::MutexGuard<'_, Arc<RTCRtpSender>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `webrtc::webrtc_util::sync::MutexGuard<'_, Arc<RTCRtpSender>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/abhi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webrtc-util-0.7.0/src/sync/mod.rs:28:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct MutexGuard<'a, T>(sync::MutexGuard<'a, T>);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it's used within this `async` fn body\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/abhi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webrtc-0.7.3/src/rtp_transceiver/mod.rs:419:44\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m419\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    pub async fn stop(&self) -> Result<()> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m ____________________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m420\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if self.stopped.load(Ordering::SeqCst) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m421\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            return Ok(());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_____^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it's used within this `async` fn body\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/abhi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webrtc-0.7.3/src/peer_connection/mod.rs:1881:45\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1881\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    pub async fn close(&self) -> Result<()> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m _____________________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1882\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        // https://www.w3.org/TR/webrtc/#dom-rtcpeerconnection-close (step #1)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1883\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if self.internal.is_closed.load(Ordering::SeqCst) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1884\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            return Ok(());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1958\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        flatten_errs(close_errs)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1959\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_____^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it's used within this `async` fn body\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/streaming/real_webrtc.rs:235:99\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m235\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    pub async fn disconnect_viewer(&mut self, stream_id: String, viewer_id: String) -> Result<()> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m ___________________________________________________________________________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m236\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        info!(\"❌ Disconnecting viewer {} from stream {}\", viewer_id, stream_id);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m237\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let peer_key = format!(\"{}:{}\", stream_id, viewer_id);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m253\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m254\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_____^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it's used within this `async` fn body\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/streaming/engine.rs:40:96\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    pub async fn disconnect_viewer(&mut self, stream_id: String, viewer: String) -> Result<()> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m ________________________________________________________________________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            WebRTCEngine::Mock(engine) => engine.disconnect_viewer(stream_id, viewer).await,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            WebRTCEngine::Real(engine) => engine.disconnect_viewer(stream_id, viewer).await,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_____^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it's used within this `async` fn body\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/streaming/engine.rs:125:81\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    async fn handle_command(&mut self, command: StreamingCommand) -> Result<()> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m _________________________________________________________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match command {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            StreamingCommand::PrepareStream { stream_id, creator } => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                info!(\"🎬 Preparing stream: {} by {}\", stream_id, creator);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m207\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m208\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_____^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it's used within this `async` fn body\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/streaming/engine.rs:93:47\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    pub async fn run(&mut self) -> Result<()> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m _______________________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        info!(\"🚀 Starting Streaming Engine\");\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_____^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it's used within this `async` block\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/integration/node.rs:117:31\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Some(tokio::spawn(async move {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tokio::spawn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/abhi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.47.1/src/task/spawn.rs:168:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn spawn<F>(future: F) -> JoinHandle<F::Output>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        F: Future + Send + 'static,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `spawn`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"`std::sync::MutexGuard<'_, Arc<RTCRtpReceiver>>` cannot be sent between threads safely","code":{"code":"E0277","explanation":"You tried to use a type which doesn't implement some trait in a place which\nexpected that trait.\n\nErroneous code example:\n\n```compile_fail,E0277\n// here we declare the Foo trait with a bar method\ntrait Foo {\n    fn bar(&self);\n}\n\n// we now declare a function which takes an object implementing the Foo trait\nfn some_func<T: Foo>(foo: T) {\n    foo.bar();\n}\n\nfn main() {\n    // we now call the method with the i32 type, which doesn't implement\n    // the Foo trait\n    some_func(5i32); // error: the trait bound `i32 : Foo` is not satisfied\n}\n```\n\nIn order to fix this error, verify that the type you're using does implement\nthe trait. Example:\n\n```\ntrait Foo {\n    fn bar(&self);\n}\n\n// we implement the trait on the i32 type\nimpl Foo for i32 {\n    fn bar(&self) {}\n}\n\nfn some_func<T: Foo>(foo: T) {\n    foo.bar(); // we can now use this method since i32 implements the\n               // Foo trait\n}\n\nfn main() {\n    some_func(5i32); // ok!\n}\n```\n\nOr in a generic context, an erroneous code example would look like:\n\n```compile_fail,E0277\nfn some_func<T>(foo: T) {\n    println!(\"{:?}\", foo); // error: the trait `core::fmt::Debug` is not\n                           //        implemented for the type `T`\n}\n\nfn main() {\n    // We now call the method with the i32 type,\n    // which *does* implement the Debug trait.\n    some_func(5i32);\n}\n```\n\nNote that the error here is in the definition of the generic function. Although\nwe only call it with a parameter that does implement `Debug`, the compiler\nstill rejects the function. It must work with all possible input types. In\norder to make this example compile, we need to restrict the generic type we're\naccepting:\n\n```\nuse std::fmt;\n\n// Restrict the input type to types that implement Debug.\nfn some_func<T: fmt::Debug>(foo: T) {\n    println!(\"{:?}\", foo);\n}\n\nfn main() {\n    // Calling the method is still fine, as i32 implements Debug.\n    some_func(5i32);\n\n    // This would fail to compile now:\n    // struct WithoutDebug;\n    // some_func(WithoutDebug);\n}\n```\n\nRust only looks at the signature of the called function, as such it must\nalready specify all requirements that will be used for every type parameter.\n"},"level":"error","spans":[{"file_name":"src/integration/node.rs","byte_start":3836,"byte_end":4008,"line_start":117,"line_end":121,"column_start":18,"column_end":15,"is_primary":true,"text":[{"text":"            Some(tokio::spawn(async move {","highlight_start":18,"highlight_end":43},{"text":"                if let Err(e) = engine.run().await {","highlight_start":1,"highlight_end":53},{"text":"                    error!(\"Streaming engine error: {}\", e);","highlight_start":1,"highlight_end":61},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }))","highlight_start":1,"highlight_end":15}],"label":"`std::sync::MutexGuard<'_, Arc<RTCRtpReceiver>>` cannot be sent between threads safely","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/integration/node.rs","byte_start":3849,"byte_end":3859,"line_start":117,"line_end":117,"column_start":31,"column_end":41,"is_primary":false,"text":[{"text":"            Some(tokio::spawn(async move {","highlight_start":31,"highlight_end":41}],"label":"within this `{async block@src/integration/node.rs:117:31: 117:41}`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"within `{async block@src/integration/node.rs:117:31: 117:41}`, the trait `Send` is not implemented for `std::sync::MutexGuard<'_, Arc<RTCRtpReceiver>>`","code":null,"level":"help","spans":[],"children":[],"rendered":null},{"message":"required because it appears within the type `webrtc::webrtc_util::sync::MutexGuard<'_, Arc<RTCRtpReceiver>>`","code":null,"level":"note","spans":[{"file_name":"/home/abhi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webrtc-util-0.7.0/src/sync/mod.rs","byte_start":829,"byte_end":839,"line_start":28,"line_end":28,"column_start":12,"column_end":22,"is_primary":true,"text":[{"text":"pub struct MutexGuard<'a, T>(sync::MutexGuard<'a, T>);","highlight_start":12,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it's used within this `async` fn body","code":null,"level":"note","spans":[{"file_name":"/home/abhi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webrtc-0.7.3/src/rtp_transceiver/mod.rs","byte_start":14133,"byte_end":14562,"line_start":419,"line_end":438,"column_start":44,"column_end":6,"is_primary":true,"text":[{"text":"    pub async fn stop(&self) -> Result<()> {","highlight_start":44,"highlight_end":45},{"text":"        if self.stopped.load(Ordering::SeqCst) {","highlight_start":1,"highlight_end":49},{"text":"            return Ok(());","highlight_start":1,"highlight_end":27},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        self.stopped.store(true, Ordering::SeqCst);","highlight_start":1,"highlight_end":52},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            let sender = self.sender.lock();","highlight_start":1,"highlight_end":45},{"text":"            sender.stop().await?;","highlight_start":1,"highlight_end":34},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            let r = self.receiver.lock();","highlight_start":1,"highlight_end":42},{"text":"            r.stop().await?;","highlight_start":1,"highlight_end":29},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        self.set_direction_internal(RTCRtpTransceiverDirection::Inactive);","highlight_start":1,"highlight_end":75},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Ok(())","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it's used within this `async` fn body","code":null,"level":"note","spans":[{"file_name":"/home/abhi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webrtc-0.7.3/src/peer_connection/mod.rs","byte_start":79769,"byte_end":82969,"line_start":1881,"line_end":1959,"column_start":45,"column_end":6,"is_primary":true,"text":[{"text":"    pub async fn close(&self) -> Result<()> {","highlight_start":45,"highlight_end":46},{"text":"        // https://www.w3.org/TR/webrtc/#dom-rtcpeerconnection-close (step #1)","highlight_start":1,"highlight_end":79},{"text":"        if self.internal.is_closed.load(Ordering::SeqCst) {","highlight_start":1,"highlight_end":60},{"text":"            return Ok(());","highlight_start":1,"highlight_end":27},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // https://www.w3.org/TR/webrtc/#dom-rtcpeerconnection-close (step #2)","highlight_start":1,"highlight_end":79},{"text":"        self.internal.is_closed.store(true, Ordering::SeqCst);","highlight_start":1,"highlight_end":63},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // https://www.w3.org/TR/webrtc/#dom-rtcpeerconnection-close (step #3)","highlight_start":1,"highlight_end":79},{"text":"        self.internal","highlight_start":1,"highlight_end":22},{"text":"            .signaling_state","highlight_start":1,"highlight_end":29},{"text":"            .store(RTCSignalingState::Closed as u8, Ordering::SeqCst);","highlight_start":1,"highlight_end":71},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Try closing everything and collect the errors","highlight_start":1,"highlight_end":57},{"text":"        // Shutdown strategy:","highlight_start":1,"highlight_end":30},{"text":"        // 1. All Conn close by closing their underlying Conn.","highlight_start":1,"highlight_end":63},{"text":"        // 2. A Mux stops this chain. It won't close the underlying","highlight_start":1,"highlight_end":68},{"text":"        //    Conn if one of the endpoints is closed down. To","highlight_start":1,"highlight_end":62},{"text":"        //    continue the chain the Mux has to be closed.","highlight_start":1,"highlight_end":59},{"text":"        let mut close_errs = vec![];","highlight_start":1,"highlight_end":37},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if let Err(err) = self.interceptor.close().await {","highlight_start":1,"highlight_end":59},{"text":"            close_errs.push(Error::new(format!(\"interceptor: {err}\")));","highlight_start":1,"highlight_end":72},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // https://www.w3.org/TR/webrtc/#dom-rtcpeerconnection-close (step #4)","highlight_start":1,"highlight_end":79},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            let mut rtp_transceivers = self.internal.rtp_transceivers.lock().await;","highlight_start":1,"highlight_end":84},{"text":"            for t in &*rtp_transceivers {","highlight_start":1,"highlight_end":42},{"text":"                if let Err(err) = t.stop().await {","highlight_start":1,"highlight_end":51},{"text":"                    close_errs.push(Error::new(format!(\"rtp_transceivers: {err}\")));","highlight_start":1,"highlight_end":85},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            rtp_transceivers.clear();","highlight_start":1,"highlight_end":38},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // https://www.w3.org/TR/webrtc/#dom-rtcpeerconnection-close (step #5)","highlight_start":1,"highlight_end":79},{"text":"        {","highlight_start":1,"highlight_end":10},{"text":"            let mut data_channels = self.internal.sctp_transport.data_channels.lock().await;","highlight_start":1,"highlight_end":93},{"text":"            for d in &*data_channels {","highlight_start":1,"highlight_end":39},{"text":"                if let Err(err) = d.close().await {","highlight_start":1,"highlight_end":52},{"text":"                    close_errs.push(Error::new(format!(\"data_channels: {err}\")));","highlight_start":1,"highlight_end":82},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            data_channels.clear();","highlight_start":1,"highlight_end":35},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // https://www.w3.org/TR/webrtc/#dom-rtcpeerconnection-close (step #6)","highlight_start":1,"highlight_end":79},{"text":"        if let Err(err) = self.internal.sctp_transport.stop().await {","highlight_start":1,"highlight_end":70},{"text":"            close_errs.push(Error::new(format!(\"sctp_transport: {err}\")));","highlight_start":1,"highlight_end":75},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // https://www.w3.org/TR/webrtc/#dom-rtcpeerconnection-close (step #7)","highlight_start":1,"highlight_end":79},{"text":"        if let Err(err) = self.internal.dtls_transport.stop().await {","highlight_start":1,"highlight_end":70},{"text":"            close_errs.push(Error::new(format!(\"dtls_transport: {err}\")));","highlight_start":1,"highlight_end":75},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // https://www.w3.org/TR/webrtc/#dom-rtcpeerconnection-close (step #8, #9, #10)","highlight_start":1,"highlight_end":88},{"text":"        if let Err(err) = self.internal.ice_transport.stop().await {","highlight_start":1,"highlight_end":69},{"text":"            close_errs.push(Error::new(format!(\"dtls_transport: {err}\")));","highlight_start":1,"highlight_end":75},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // https://www.w3.org/TR/webrtc/#dom-rtcpeerconnection-close (step #11)","highlight_start":1,"highlight_end":80},{"text":"        RTCPeerConnection::update_connection_state(","highlight_start":1,"highlight_end":52},{"text":"            &self.internal.on_peer_connection_state_change_handler,","highlight_start":1,"highlight_end":68},{"text":"            &self.internal.is_closed,","highlight_start":1,"highlight_end":38},{"text":"            &self.internal.peer_connection_state,","highlight_start":1,"highlight_end":50},{"text":"            self.ice_connection_state(),","highlight_start":1,"highlight_end":41},{"text":"            self.internal.dtls_transport.state(),","highlight_start":1,"highlight_end":50},{"text":"        )","highlight_start":1,"highlight_end":10},{"text":"        .await;","highlight_start":1,"highlight_end":16},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        if let Err(err) = self.internal.ops.close().await {","highlight_start":1,"highlight_end":60},{"text":"            close_errs.push(Error::new(format!(\"ops: {err}\")));","highlight_start":1,"highlight_end":64},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        flatten_errs(close_errs)","highlight_start":1,"highlight_end":33},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it's used within this `async` fn body","code":null,"level":"note","spans":[{"file_name":"src/streaming/real_webrtc.rs","byte_start":9254,"byte_end":9956,"line_start":235,"line_end":254,"column_start":99,"column_end":6,"is_primary":true,"text":[{"text":"    pub async fn disconnect_viewer(&mut self, stream_id: String, viewer_id: String) -> Result<()> {","highlight_start":99,"highlight_end":100},{"text":"        info!(\"❌ Disconnecting viewer {} from stream {}\", viewer_id, stream_id);","highlight_start":1,"highlight_end":81},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        let peer_key = format!(\"{}:{}\", stream_id, viewer_id);","highlight_start":1,"highlight_end":63},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        // Close the peer connection","highlight_start":1,"highlight_end":37},{"text":"        if let Some(peer_connection) = self.peer_connections.write().await.remove(&peer_key) {","highlight_start":1,"highlight_end":95},{"text":"            if let Err(e) = peer_connection.close().await {","highlight_start":1,"highlight_end":60},{"text":"                warn!(\"Error closing peer connection: {}\", e);","highlight_start":1,"highlight_end":63},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Remove viewer from stream","highlight_start":1,"highlight_end":37},{"text":"        if let Some(stream) = self.active_streams.write().await.get_mut(&stream_id) {","highlight_start":1,"highlight_end":86},{"text":"            stream.viewers.remove(&viewer_id);","highlight_start":1,"highlight_end":47},{"text":"            stream.viewer_count = stream.viewers.len() as u32;","highlight_start":1,"highlight_end":63},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        Ok(())","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it's used within this `async` fn body","code":null,"level":"note","spans":[{"file_name":"src/streaming/engine.rs","byte_start":1537,"byte_end":1761,"line_start":40,"line_end":45,"column_start":96,"column_end":6,"is_primary":true,"text":[{"text":"    pub async fn disconnect_viewer(&mut self, stream_id: String, viewer: String) -> Result<()> {","highlight_start":96,"highlight_end":97},{"text":"        match self {","highlight_start":1,"highlight_end":21},{"text":"            WebRTCEngine::Mock(engine) => engine.disconnect_viewer(stream_id, viewer).await,","highlight_start":1,"highlight_end":93},{"text":"            WebRTCEngine::Real(engine) => engine.disconnect_viewer(stream_id, viewer).await,","highlight_start":1,"highlight_end":93},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it's used within this `async` fn body","code":null,"level":"note","spans":[{"file_name":"src/streaming/engine.rs","byte_start":4566,"byte_end":8242,"line_start":125,"line_end":208,"column_start":81,"column_end":6,"is_primary":true,"text":[{"text":"    async fn handle_command(&mut self, command: StreamingCommand) -> Result<()> {","highlight_start":81,"highlight_end":82},{"text":"        match command {","highlight_start":1,"highlight_end":24},{"text":"            StreamingCommand::PrepareStream { stream_id, creator } => {","highlight_start":1,"highlight_end":72},{"text":"                info!(\"🎬 Preparing stream: {} by {}\", stream_id, creator);","highlight_start":1,"highlight_end":75},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                let quality = StreamQualitySettings::default();","highlight_start":1,"highlight_end":64},{"text":"                self.webrtc_engine.create_stream(stream_id.clone(), creator.clone(), quality).await?;","highlight_start":1,"highlight_end":102},{"text":"                self.active_streams.insert(stream_id, creator);","highlight_start":1,"highlight_end":64},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            StreamingCommand::StartStream { stream_id, creator, quality_settings } => {","highlight_start":1,"highlight_end":88},{"text":"                info!(\"▶️ Starting stream: {} by {}\", stream_id, creator);","highlight_start":1,"highlight_end":75},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                // Create the stream with specified quality","highlight_start":1,"highlight_end":60},{"text":"                self.webrtc_engine.create_stream(stream_id.clone(), creator.clone(), quality_settings).await?;","highlight_start":1,"highlight_end":111},{"text":"                self.active_streams.insert(stream_id.clone(), creator.clone());","highlight_start":1,"highlight_end":80},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                // Start generating some demo stream data","highlight_start":1,"highlight_end":58},{"text":"                let stream_id_clone = stream_id.clone();","highlight_start":1,"highlight_end":57},{"text":"                let event_tx = self.event_tx.clone();","highlight_start":1,"highlight_end":54},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                tokio::spawn(async move {","highlight_start":1,"highlight_end":42},{"text":"                    // Simulate stream data generation","highlight_start":1,"highlight_end":55},{"text":"                    for frame in 0..30 { // 30 frames for demo","highlight_start":1,"highlight_end":63},{"text":"                        // In the demo, we just simulate successful data transmission","highlight_start":1,"highlight_end":86},{"text":"                        debug!(\"📡 Simulated stream data frame {}\", frame);","highlight_start":1,"highlight_end":75},{"text":"                        ","highlight_start":1,"highlight_end":25},{"text":"                        tokio::time::sleep(tokio::time::Duration::from_millis(33)).await; // ~30 FPS","highlight_start":1,"highlight_end":101},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                    ","highlight_start":1,"highlight_end":21},{"text":"                    // Emit stream ended event","highlight_start":1,"highlight_end":47},{"text":"                    let _ = event_tx.send(StreamingEvent::StreamEnded { ","highlight_start":1,"highlight_end":73},{"text":"                        stream_id: stream_id_clone, ","highlight_start":1,"highlight_end":53},{"text":"                        duration_seconds: 1 ","highlight_start":1,"highlight_end":45},{"text":"                    }).await;","highlight_start":1,"highlight_end":30},{"text":"                });","highlight_start":1,"highlight_end":20},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                self.event_tx.send(StreamingEvent::StreamStarted { ","highlight_start":1,"highlight_end":68},{"text":"                    stream_id, ","highlight_start":1,"highlight_end":32},{"text":"                    creator ","highlight_start":1,"highlight_end":29},{"text":"                }).await?;","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            StreamingCommand::GrantAccess { stream_id, viewer } => {","highlight_start":1,"highlight_end":69},{"text":"                info!(\"✅ Granting access: {} to stream {}\", viewer, stream_id);","highlight_start":1,"highlight_end":80},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                self.webrtc_engine.connect_viewer(stream_id.clone(), viewer.clone()).await?;","highlight_start":1,"highlight_end":93},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                self.event_tx.send(StreamingEvent::ViewerConnected { ","highlight_start":1,"highlight_end":70},{"text":"                    stream_id, ","highlight_start":1,"highlight_end":32},{"text":"                    viewer_id: viewer ","highlight_start":1,"highlight_end":39},{"text":"                }).await?;","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            StreamingCommand::RevokeAccess { stream_id, viewer } => {","highlight_start":1,"highlight_end":70},{"text":"                info!(\"❌ Revoking access: {} from stream {}\", viewer, stream_id);","highlight_start":1,"highlight_end":82},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                self.webrtc_engine.disconnect_viewer(stream_id.clone(), viewer.clone()).await?;","highlight_start":1,"highlight_end":96},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                self.event_tx.send(StreamingEvent::ViewerDisconnected { ","highlight_start":1,"highlight_end":73},{"text":"                    stream_id, ","highlight_start":1,"highlight_end":32},{"text":"                    viewer_id: viewer,","highlight_start":1,"highlight_end":39},{"text":"                    reason: \"Access revoked\".to_string(),","highlight_start":1,"highlight_end":58},{"text":"                }).await?;","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            StreamingCommand::ConnectToStream { stream_id, viewer } => {","highlight_start":1,"highlight_end":73},{"text":"                info!(\"🔗 Connecting {} to stream {}\", viewer, stream_id);","highlight_start":1,"highlight_end":74},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                self.webrtc_engine.connect_viewer(stream_id.clone(), viewer.clone()).await?;","highlight_start":1,"highlight_end":93},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                self.event_tx.send(StreamingEvent::ViewerConnected { ","highlight_start":1,"highlight_end":70},{"text":"                    stream_id, ","highlight_start":1,"highlight_end":32},{"text":"                    viewer_id: viewer ","highlight_start":1,"highlight_end":39},{"text":"                }).await?;","highlight_start":1,"highlight_end":27},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"            ","highlight_start":1,"highlight_end":13},{"text":"            _ => {","highlight_start":1,"highlight_end":19},{"text":"                debug!(\"Unhandled streaming command: {:?}\", command);","highlight_start":1,"highlight_end":70},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        Ok(())","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it's used within this `async` fn body","code":null,"level":"note","spans":[{"file_name":"src/streaming/engine.rs","byte_start":3434,"byte_end":4480,"line_start":93,"line_end":123,"column_start":47,"column_end":6,"is_primary":true,"text":[{"text":"    pub async fn run(&mut self) -> Result<()> {","highlight_start":47,"highlight_end":48},{"text":"        info!(\"🚀 Starting Streaming Engine\");","highlight_start":1,"highlight_end":46},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        // Start accepting WebRTC connections in background","highlight_start":1,"highlight_end":60},{"text":"        let _webrtc_engine = &self.webrtc_engine;","highlight_start":1,"highlight_end":50},{"text":"        tokio::spawn(async move {","highlight_start":1,"highlight_end":34},{"text":"            // Note: In the actual implementation, we'd clone webrtc_engine here","highlight_start":1,"highlight_end":81},{"text":"            // For now, we'll just simulate connection acceptance","highlight_start":1,"highlight_end":66},{"text":"            loop {","highlight_start":1,"highlight_end":19},{"text":"                tokio::time::sleep(tokio::time::Duration::from_secs(1)).await;","highlight_start":1,"highlight_end":79},{"text":"                debug!(\"🔄 WebRTC connection handler running\");","highlight_start":1,"highlight_end":63},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        });","highlight_start":1,"highlight_end":12},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        loop {","highlight_start":1,"highlight_end":15},{"text":"            tokio::select! {","highlight_start":1,"highlight_end":29},{"text":"                Some(command) = self.command_rx.recv() => {","highlight_start":1,"highlight_end":60},{"text":"                    if let Err(e) = self.handle_command(command).await {","highlight_start":1,"highlight_end":73},{"text":"                        error!(\"Error handling streaming command: {}\", e);","highlight_start":1,"highlight_end":75},{"text":"                    }","highlight_start":1,"highlight_end":22},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"                ","highlight_start":1,"highlight_end":17},{"text":"                else => {","highlight_start":1,"highlight_end":26},{"text":"                    warn!(\"Streaming command channel closed\");","highlight_start":1,"highlight_end":63},{"text":"                    break;","highlight_start":1,"highlight_end":27},{"text":"                }","highlight_start":1,"highlight_end":18},{"text":"            }","highlight_start":1,"highlight_end":14},{"text":"        }","highlight_start":1,"highlight_end":10},{"text":"        ","highlight_start":1,"highlight_end":9},{"text":"        Ok(())","highlight_start":1,"highlight_end":15},{"text":"    }","highlight_start":1,"highlight_end":6}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required because it's used within this `async` block","code":null,"level":"note","spans":[{"file_name":"src/integration/node.rs","byte_start":3849,"byte_end":3859,"line_start":117,"line_end":117,"column_start":31,"column_end":41,"is_primary":true,"text":[{"text":"            Some(tokio::spawn(async move {","highlight_start":31,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"required by a bound in `tokio::spawn`","code":null,"level":"note","spans":[{"file_name":"/home/abhi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.47.1/src/task/spawn.rs","byte_start":5224,"byte_end":5229,"line_start":166,"line_end":166,"column_start":12,"column_end":17,"is_primary":false,"text":[{"text":"    pub fn spawn<F>(future: F) -> JoinHandle<F::Output>","highlight_start":12,"highlight_end":17}],"label":"required by a bound in this function","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/home/abhi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.47.1/src/task/spawn.rs","byte_start":5299,"byte_end":5303,"line_start":168,"line_end":168,"column_start":21,"column_end":25,"is_primary":true,"text":[{"text":"        F: Future + Send + 'static,","highlight_start":21,"highlight_end":25}],"label":"required by this bound in `spawn`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0277]\u001b[0m\u001b[0m\u001b[1m: `std::sync::MutexGuard<'_, Arc<RTCRtpReceiver>>` cannot be sent between threads safely\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/integration/node.rs:117:18\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            Some(tokio::spawn(async move {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m----------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mwithin this `{async block@src/integration/node.rs:117:31: 117:41}`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m __________________|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                if let Err(e) = engine.run().await {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m119\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    error!(\"Streaming engine error: {}\", e);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            }))\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m|______________^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`std::sync::MutexGuard<'_, Arc<RTCRtpReceiver>>` cannot be sent between threads safely\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: within `{async block@src/integration/node.rs:117:31: 117:41}`, the trait `Send` is not implemented for `std::sync::MutexGuard<'_, Arc<RTCRtpReceiver>>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it appears within the type `webrtc::webrtc_util::sync::MutexGuard<'_, Arc<RTCRtpReceiver>>`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/abhi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webrtc-util-0.7.0/src/sync/mod.rs:28:12\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m28\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub struct MutexGuard<'a, T>(sync::MutexGuard<'a, T>);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it's used within this `async` fn body\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/abhi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webrtc-0.7.3/src/rtp_transceiver/mod.rs:419:44\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m419\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    pub async fn stop(&self) -> Result<()> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m ____________________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m420\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if self.stopped.load(Ordering::SeqCst) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m421\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            return Ok(());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m437\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m438\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_____^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it's used within this `async` fn body\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/abhi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/webrtc-0.7.3/src/peer_connection/mod.rs:1881:45\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1881\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    pub async fn close(&self) -> Result<()> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m _____________________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1882\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        // https://www.w3.org/TR/webrtc/#dom-rtcpeerconnection-close (step #1)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1883\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        if self.internal.is_closed.load(Ordering::SeqCst) {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1884\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            return Ok(());\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1958\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        flatten_errs(close_errs)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1959\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_____^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it's used within this `async` fn body\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/streaming/real_webrtc.rs:235:99\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m235\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    pub async fn disconnect_viewer(&mut self, stream_id: String, viewer_id: String) -> Result<()> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m ___________________________________________________________________________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m236\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        info!(\"❌ Disconnecting viewer {} from stream {}\", viewer_id, stream_id);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m237\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m238\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let peer_key = format!(\"{}:{}\", stream_id, viewer_id);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m253\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m254\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_____^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it's used within this `async` fn body\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/streaming/engine.rs:40:96\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m40\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    pub async fn disconnect_viewer(&mut self, stream_id: String, viewer: String) -> Result<()> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m ________________________________________________________________________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m41\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match self {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            WebRTCEngine::Mock(engine) => engine.disconnect_viewer(stream_id, viewer).await,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m43\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            WebRTCEngine::Real(engine) => engine.disconnect_viewer(stream_id, viewer).await,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m44\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m45\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_____^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it's used within this `async` fn body\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/streaming/engine.rs:125:81\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    async fn handle_command(&mut self, command: StreamingCommand) -> Result<()> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m _________________________________________________________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        match command {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            StreamingCommand::PrepareStream { stream_id, creator } => {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                info!(\"🎬 Preparing stream: {} by {}\", stream_id, creator);\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m207\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m208\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_____^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it's used within this `async` fn body\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/streaming/engine.rs:93:47\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m93\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m    pub async fn run(&mut self) -> Result<()> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m _______________________________________________^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m94\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        info!(\"🚀 Starting Streaming Engine\");\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        Ok(())\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|_____^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required because it's used within this `async` block\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/integration/node.rs:117:31\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            Some(tokio::spawn(async move {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: required by a bound in `tokio::spawn`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/home/abhi/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.47.1/src/task/spawn.rs:168:21\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m166\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub fn spawn<F>(future: F) -> JoinHandle<F::Output>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m-----\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12mrequired by a bound in this function\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m167\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    where\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m168\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        F: Future + Send + 'static,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mrequired by this bound in `spawn`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 3 previous errors; 18 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors; 18 warnings emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0277, E0432.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0277, E0432.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0277`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0277`.\u001b[0m\n"}
